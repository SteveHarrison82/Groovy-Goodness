tag:blogger.com,1999:blog-6671019398434141469.post-50419515487882318802009-10-22T07:00:00.001+02:002010-11-26T11:15:13.151+01:00Groovy Goodness: Using the replaceAll Methods from String<p>Groovy adds two extra <code>replaceAll</code> methods to the <a href="http://groovy.codehaus.org/groovy-jdk/java/lang/String.html"><code>String</code></a> class. First we can pass a <code>Pattern</code> instead of a <code>String</code> argument with <code>replaceAll(Pattern, String)</code>. And with the other method we can use a closure to replace a value found with <code>replaceAll(String, Closure)</code>.</p>
<pre class="brush:groovy">
def s = "Programming with Groovy is fun!"

assert "Programming with Groovy rocks!" == s.replaceAll(~/is fun!/, "rocks!")  // Groovy extension to String.
assert "Programming with Groovy is awesome." == s.replaceAll("fun!", "awesome.")  // java.lang.String.replaceAll.

// Replace found String with result of closure.
def replaced = s.replaceAll(/fun/) {
    def list = ['awesome', 'cool', 'okay']
    list[new Random().nextInt(list.size())]
}
assert [
    "Programming with Groovy is awesome!",
    "Programming with Groovy is cool!",
    "Programming with Groovy is okay!"
].contains(replaced)
 
// Use closure to replace text and use grouping. 
// First closure parameter is complete string and following
// parameters are the groups.
def txt = "Generated on 30-10-2009 with Groovy."
def replacedTxt = txt.replaceAll(/.*(\d{2}-\d{2}-\d{4}).*(Gr.*)./) { all, date, lang ->
    def dateObj = Date.parse('dd-MM-yyyy', date)
    "The text '$all' was created with $lang on a ${dateObj.format('EEEE')}."
}
assert "The text 'Generated on 30-10-2009 with Groovy.' was created with Groovy on a Friday." == replacedTxt
</pre>Hubert Klein Ikkinkhttps://plus.google.com/116304108087638220732noreply@blogger.com0