tag:blogger.com,1999:blog-6671019398434141469.post-23524010854128399502014-05-05T16:25:00.000+02:002014-05-07T15:15:22.280+02:00Groovy Goodness: Using Builder to Create Fluent API for Other Classes<p>In a <a href="http://mrhaki.blogspot.com/2014/04/groovy-goodness-use-builder-ast.html">previous post</a> we learned about the new <code>@Builder</code> AST transformation introduced in Groovy 2.3. We applied to the annotation to our class files and we got a nice fluent API to set property values. But what if we cannot change the class itself, for example if we want to create a fluent API for classes in an external library. Then we can still use the <code>@Builder</code> AST transformation but we use a different strategy. We can define the builder strategy via a annotation parameter.</p><p>In the following sample we assume the <code>Message</code> class is from an external library and we cannot or do not want to change the class definition. We create a new Groovy class and set the <code>@Builder</code> annotation on this new class. We use the annotation parameters <code> builderStrategy</code> to indicate the generated code is not for the new class, but for the class set with the annotation parameter <code>forClass</code>.</p><pre class="brush:groovy">import groovy.transform.builder.Builder
import groovy.transform.builder.ExternalStrategy

// We don't want to change the definition
// of this class to get a fluent API.
class Message {
    String from, to, subject, body
}

// New builder class for the Message class.
@Builder(builderStrategy = ExternalStrategy, forClass = Message)
class MessageBuilder {}

def message = new MessageBuilder()  // Create new instance.
        .from('mrhaki@mrhaki.com')
        .to('mail@host.nl')
        .subject('Groovy 2.3 is released')
        .body('Groovy rocks!')
        .build()  // Return filled Message instance.

assert message.body == 'Groovy rocks!'
assert message.from == 'mrhaki@mrhaki.com'
assert message.subject == 'Groovy 2.3 is released'
</pre><p>We can also customize the prefix for the method names to set property values and we can change the name of the build method. And we can include or exclude properties with the <code>includes</code> and <code>excludes</code> properties:</p><pre class="brush:groovy">import groovy.transform.builder.Builder
import groovy.transform.builder.ExternalStrategy

class Message {
    String from, to, subject, body
}

@Builder(builderStrategy = ExternalStrategy, forClass = Message,
        prefix = 'assign', buildMethodName = 'create',
        includes = 'from,subject')
class MessageBuilder {}

def message = new MessageBuilder()
        .assignFrom('mrhaki@mrhaki.com')
        .assignSubject('Groovy 2.3 is released')
        .create()

assert message.from == 'mrhaki@mrhaki.com'
assert message.subject == 'Groovy 2.3 is released'
</pre><p>Code written with Groovy 2.3.</p>Hubert Klein Ikkinkhttps://plus.google.com/116304108087638220732noreply@blogger.com0