tag:blogger.com,1999:blog-6671019398434141469.post-34317190691452550742011-11-17T07:19:00.001+01:002011-11-17T07:23:27.659+01:00Groovy Goodness: Create Our Own Script Class<p>Groovy is a great language to write DSL implementations. The Groovy syntax allows for example to leave out parenthesis or semi colons, which results in better readable DSL (which is actually Groovy code).</p><p>To run a DSL script we can use the GroovyShell class and evaluate the script. By default the script is evaluated with an instance of <code>groovy.lang.Script</code> class. But we can extends this <code>Script</code> class and write our DSL allowed methods, which can then be used by the DSL script. We pass our own <code>Script</code> class to the <code>GroovyShell</code> with an <code>CompilerConfiguration</code> object. The <code>CompilerConfiguration</code> allows us to set a new base script class to be used.</p><p>The following sample is a simple DSL to change the state of a <code>Car</code> object. Notice we implicitly access the <code>Car</code> object that is passed to the <code>GroovyShell</code> via a binding. The custom <code>CarScript</code> class can access the car object via the binding and change it's state.</p><pre class="brush:groovy">import org.codehaus.groovy.control.CompilerConfiguration

// Simple Car class to save state and distance.
class Car {
    String state
    Long distance = 0
}

// Custom Script with methods that change the Car's state.
// The Car object is passed via the binding.
abstract class CarScript extends Script {
    def start() {
        this.binding.car.state = 'started'
    }

    def stop() {
        this.binding.car.state = 'stopped'
    }

    def drive(distance) {
        this.binding.car.distance += distance
    }
}


// Use custom CarScript.
def compilerConfiguration = new CompilerConfiguration()
compilerConfiguration.scriptBaseClass = CarScript.class.name

// Define Car object here, so we can use it in assertions later on.
def car = new Car()
// Add to script binding (CarScript references this.binding.car).
def binding = new Binding(car: car)

// Configure the GroovyShell.
def shell = new GroovyShell(this.class.classLoader, binding, compilerConfiguration)

// Simple DSL to start, drive and stop the car.
// The methods are defined in the CarScript class.
def carDsl = '''
start()
drive 20
stop()
'''

// Run DSL script.
shell.evaluate carDsl

// Checks to see that Car object has changed.
assert car.distance == 20
assert car.state == 'stopped'
</pre>Hubert Klein Ikkinkhttps://plus.google.com/116304108087638220732noreply@blogger.com2